components:
  schemas:
    key:
      additionalProperties: false
      description: A single SSL key
      properties:
        description: {description: A brief description of the key, type: string}
        id: {description: Key ID, readOnly: true, type: integer}
        name: {description: The name of the key, type: string}
        timestamp: {description: 'The time when this key was added, in Unix epoch
            seconds

            ', readOnly: true, type: integer}
      required: [id, name]
      type: object
    keys:
      additionalProperties: false
      description: The SSL keys being stored
      properties:
        items:
          items: {$ref: '#/components/schemas/key'}
          type: array
      required: [items]
      type: object
  securitySchemes:
    bearerAuth: {bearerFormat: JWT, description: Access token approach to reaching
        appliance, scheme: bearer, type: http}
    oAuth2NoScopes:
      description: Credential approach to retrieving token
      flows:
        clientCredentials:
          refreshUrl: /mgmt.aaa/1.0/token
          scopes: {}
          tokenUrl: /mgmt.aaa/1.0/token
      type: oauth2
info: {description: Service which securely stores SSL keys, title: NPM SSL Key Store,
  version: '1.0'}
openapi: 3.0.2
paths:
  /npm.ssl_key_store/1.0/keys:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items: {$ref: '#/components/schemas/keys'}
                type: array
          description: ''
      summary: get
      tags: [keys]
  /npm.ssl_key_store/1.0/keys/import:
    post:
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                description: {description: A brief description of the key, type: string}
                key: {description: 'The key to import, in PEM format', type: string}
                name: {description: The name of the key, type: string}
                passphrase: {description: 'The passphrase to decode the key, if required

                    ', type: string}
              required: [name, key]
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items: {$ref: '#/components/schemas/key'}
                type: array
          description: ''
      summary: import
      tags: [keys]
  /npm.ssl_key_store/1.0/keys/items/{id}:
    delete:
      parameters:
      - description: Key ID
        in: path
        name: id
        required: true
        schema: {type: string}
      responses:
        '200': {description: 'On success, the server does not provide any body in
            the response.'}
      summary: delete
      tags: [keys]
    get:
      parameters:
      - description: Key ID
        in: path
        name: id
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema:
                items: {$ref: '#/components/schemas/key'}
                type: array
          description: ''
      summary: get
      tags: [keys]
security:
- oAuth2NoScopes: []
- bearerAuth: []
servers:
- description: Example API base path for URL
  url: https://{URL}:{Port}/api/
  variables:
    Port:
      default: '443'
      enum: ['443']
    URL: {default: abc.example.com}
